{"version":3,"sources":["Bookcard.js","Bookcards.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Bookcard","props","authors","book","className","imageLinks","src","smallThumbnail","alt","title","join","publisher","href","infoLink","target","rel","Bookcards","this","books","map","key","id","React","Component","App","fetchBooks","a","async","axios","get","state","searchTerm","then","res","data","totalItems","rawBooksData","items","console","log","volumeInfo","setState","error","noOfBooks","catch","e","message","handleInput","value","handleSubmit","preventDefault","length","onSubmit","type","name","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kWAuBeA,G,MApBE,SAAAC,GACf,IAAMC,EAAUD,EAAME,KAAKD,QAAUD,EAAME,KAAKD,QAAU,KAC1D,OACE,yBAAKE,UAAU,YACZH,EAAME,KAAKE,YACV,yBAAKC,IAAKL,EAAME,KAAKE,WAAWE,eAAgBC,IAAI,eAEtD,4BAAKP,EAAME,KAAKM,OAChB,2BAAIP,GAAO,aAAUA,EAAQQ,KAAK,QAClC,6BACCT,EAAME,KAAKQ,WAAX,uBAAwCV,EAAME,KAAKQ,WACpD,6BACA,uBAAGC,KAAMX,EAAME,KAAKU,SAAUC,OAAO,SAASC,IAAI,uBAChD,yCAEF,gCCdeC,G,uLAEjB,OACE,yBAAKZ,UAAU,aACZa,KAAKhB,MAAMiB,MAAMC,KAAI,SAAAhB,GAAI,OACxB,kBAAC,EAAD,CAAUA,KAAMA,EAAMiB,IAAKjB,EAAKkB,a,GALHC,IAAMC,YCExBC,G,kBACnB,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAQRwB,WAAa,oBAAAC,EAAAC,OAAA,8FAEXC,IACGC,IADH,UAFW,8CAEX,cAEoB,EAAKC,MAAMC,WAF/B,gBClBmB,0CDkBnB,gCAIGC,MAAK,SAAAC,GAGJ,GAAIA,EAAIC,KAAKC,WAAa,EAAG,CAC3B,IAAIC,EAAY,YAAOH,EAAIC,KAAKG,OAChCC,QAAQC,IAAIH,GACZ,IAAMlB,EAAQkB,EAAajB,KAAI,SAAAhB,GAAI,MAAK,CACtCkB,GAAIlB,EAAKkB,GACTV,UAAWR,EAAKqC,WAAW7B,UAC3BT,QAASC,EAAKqC,WAAWtC,QACzBW,SAAUV,EAAKqC,WAAW3B,SAC1BJ,MAAON,EAAKqC,WAAW/B,MACvBJ,WAAYF,EAAKqC,WAAWnC,eAE9B,EAAKoC,UAAS,iBAAO,CACnBvB,MAAOA,EACPwB,MAAO,GACPC,UAAWV,EAAIC,KAAKC,oBAGtB,EAAKM,UAAS,iBAAO,CACnBvB,MAAO,GACPwB,MAAO,iBACPC,UAAW,SAIhBC,OAAM,SAAAC,GACDA,EAAEC,QACJ,EAAKL,UAAS,iBAAO,CACnBvB,MAAO,GACPyB,UAAW,EACXD,MAAOG,EAAEC,YAGX,EAAKL,UAAS,iBAAO,CACnBvB,MAAO,GACPyB,UAAW,SA3CR,sCATM,EAyDnBI,YAAc,SAAAF,GACZ,EAAKJ,SAAS,CAAEV,WAAYc,EAAE/B,OAAOkC,SA1DpB,EA4DnBC,aAAe,SAAAJ,GACbA,EAAEK,iBACmC,IAAjC,EAAKpB,MAAMC,WAAWoB,OACxB,EAAKV,UAAS,iBAAO,CAAEvB,MAAO,GAAIwB,MAAO,wBAEzC,EAAKjB,cA/DP,EAAKK,MAAQ,CACXC,WAAY,GACZb,MAAO,GACPyB,UAAW,EACXD,MAAO,IANQ,E,sEAqEjB,OACE,yBAAKtC,UAAU,OACb,2CACA,6BACA,0BAAMgD,SAAUnC,KAAKgC,cACnB,2BACEI,KAAK,OACLC,KAAK,SACLN,MAAO/B,KAAKa,MAAMC,WAClBwB,SAAUtC,KAAK8B,cAEjB,6BACA,2CAEF,6BAC0B,IAAzB9B,KAAKa,MAAMa,WAAmB1B,KAAKa,MAAMY,MACxC,2BAAIzB,KAAKa,MAAMY,OAEf,kBAAC,EAAD,CAAWxB,MAAOD,KAAKa,MAAMZ,a,GAxFNI,IAAMC,YEMnBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.f0548e0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Bookcard.css\";\r\n\r\nconst Bookcard = props => {\r\n  const authors = props.book.authors ? props.book.authors : null;\r\n  return (\r\n    <div className=\"Bookcard\">\r\n      {props.book.imageLinks && (\r\n        <img src={props.book.imageLinks.smallThumbnail} alt=\"Book Cover\" />\r\n      )}\r\n      <h4>{props.book.title}</h4>\r\n      <i>{authors && `By ${authors.join(\", \")}`}</i>\r\n      <br />\r\n      {props.book.publisher && `Published by ${props.book.publisher}`}\r\n      <br />\r\n      <a href={props.book.infoLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <button>More</button>\r\n      </a>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bookcard;\r\n","import React from \"react\";\r\nimport Bookcard from \"./Bookcard\";\r\nimport \"./Bookcards.css\";\r\n\r\nexport default class Bookcards extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Bookcards\">\r\n        {this.props.books.map(book => (\r\n          <Bookcard book={book} key={book.id} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport { API_KEY } from \"./config\";\nimport Bookcards from \"./Bookcards\";\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n      books: [],\n      noOfBooks: 0,\n      error: \"\"\n    };\n  }\n  fetchBooks = async () => {\n    const API_URL = `https://www.googleapis.com/books/v1/volumes`;\n    axios\n      .get(\n        `${API_URL}?q=${this.state.searchTerm}&key=${API_KEY}&startIndex=0&maxResults=40`\n      )\n      .then(res => {\n        //console.log(res.data);\n\n        if (res.data.totalItems > 0) {\n          let rawBooksData = [...res.data.items];\n          console.log(rawBooksData);\n          const books = rawBooksData.map(book => ({\n            id: book.id,\n            publisher: book.volumeInfo.publisher,\n            authors: book.volumeInfo.authors,\n            infoLink: book.volumeInfo.infoLink,\n            title: book.volumeInfo.title,\n            imageLinks: book.volumeInfo.imageLinks\n          }));\n          this.setState(() => ({\n            books: books,\n            error: \"\",\n            noOfBooks: res.data.totalItems\n          }));\n        } else {\n          this.setState(() => ({\n            books: [],\n            error: \"No books found\",\n            noOfBooks: 0\n          }));\n        }\n      })\n      .catch(e => {\n        if (e.message) {\n          this.setState(() => ({\n            books: [],\n            noOfBooks: 0,\n            error: e.message\n          }));\n        } else {\n          this.setState(() => ({\n            books: [],\n            noOfBooks: 0\n          }));\n        }\n      });\n  };\n  handleInput = e => {\n    this.setState({ searchTerm: e.target.value });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.searchTerm.length === 0) {\n      this.setState(() => ({ books: [], error: \"Please enter text\" }));\n    } else {\n      this.fetchBooks();\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>BOOK FINDER</h1>\n        <br />\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"search\"\n            value={this.state.searchTerm}\n            onChange={this.handleInput}\n          />\n          <br />\n          <button>Search</button>\n        </form>\n        <br />\n        {this.state.noOfBooks === 0 || this.state.error ? (\n          <p>{this.state.error}</p>\n        ) : (\n          <Bookcards books={this.state.books} />\n        )}\n      </div>\n    );\n  }\n}\n","export const API_KEY = \"AIzaSyCMK80BWGq9YD8s3dBEZ-FCOpACYFZ_dSM\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}